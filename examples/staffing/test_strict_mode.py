from ortools.sat.python import cp_model

from pyworkforce import MinHoursRoster
from pyworkforce.staffing.multi_zone_planner import Statuses


def test_roaster_feasibility():
    num_days = 31
    resources = ['emp_0']
    shifts = ['7_12_6_0', '7_12_6_15', '7_12_6_30', '7_12_6_45', '7_12_7_0', '7_12_7_15', '7_12_7_30', '7_12_7_45', '7_12_8_0', '7_12_8_15', '7_12_8_30', '7_12_8_45', '7_12_9_0', '7_12_9_15', '7_12_9_30', '7_12_9_45', '7_12_10_0', '7_12_10_15', '7_12_10_30', '7_12_10_45']
    shifts_hours = [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
    min_working_hours = 176
    max_resting = 9
    required_resources = {'7_12_10_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_10_15': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_10_30': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_10_45': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], '7_12_6_0': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0], '7_12_6_15': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], '7_12_6_30': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], '7_12_6_45': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_7_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_7_15': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_7_30': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_7_45': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_8_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_8_15': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_8_30': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_8_45': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_9_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_9_15': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_9_30': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_12_9_45': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}

    solver = MinHoursRoster(num_days=num_days,
                            resources=resources,
                            shifts=shifts,
                            shifts_hours=shifts_hours,
                            min_working_hours=min_working_hours,
                            max_resting=max_resting,
                            required_resources=required_resources,
                            banned_shifts=[],
                            #max_search_time=10 * 60,
                            strict_mode=False
                            )

    solution = solver.solve()
    status = Statuses(solution['status'])

    assert status.is_ok() is True

def test_roaster_feasibility_2():
    num_days = 31
    resources = ['emp_0', 'emp_1', 'emp_2', 'emp_3', 'emp_4', 'emp_5', 'emp_6', 'emp_7', 'emp_8', 'emp_9', 'emp_10', 'emp_11', 'emp_12', 'emp_13', 'emp_14', 'emp_15', 'emp_16', 'emp_17', 'emp_18', 'emp_19', 'emp_20', 'emp_21', 'emp_22', 'emp_23', 'emp_24', 'emp_25', 'emp_26', 'emp_27', 'emp_28', 'emp_29', 'emp_30', 'emp_31', 'emp_32', 'emp_33', 'emp_34', 'emp_35', 'emp_36', 'emp_37', 'emp_38', 'emp_39', 'emp_40', 'emp_41', 'emp_42', 'emp_43', 'emp_44', 'emp_45', 'emp_46', 'emp_47', 'emp_48', 'emp_49', 'emp_50', 'emp_51', 'emp_52', 'emp_53', 'emp_54', 'emp_55', 'emp_56', 'emp_57', 'emp_58', 'emp_59', 'emp_60', 'emp_61', 'emp_62', 'emp_63', 'emp_64', 'emp_65', 'emp_66', 'emp_67', 'emp_68', 'emp_69', 'emp_70', 'emp_71', 'emp_72', 'emp_73', 'emp_74', 'emp_75', 'emp_76', 'emp_77']
    shifts = ['7_9_6_0', '7_9_6_15', '7_9_6_30', '7_9_6_45', '7_9_7_0', '7_9_7_15', '7_9_7_30', '7_9_7_45', '7_9_8_0', '7_9_8_15', '7_9_8_30', '7_9_8_45', '7_9_9_0', '7_9_9_15', '7_9_9_30', '7_9_9_45', '7_9_10_0', '7_9_10_15', '7_9_10_30', '7_9_10_45', '7_9_11_0', '7_9_11_15', '7_9_11_30', '7_9_11_45', '7_9_12_0', '7_9_12_15', '7_9_12_30', '7_9_12_45']
    shifts_hours = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
    min_working_hours = 176
    max_resting = 9
    required_resources = {'7_9_10_0': [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0], '7_9_10_15': [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], '7_9_10_30': [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], '7_9_10_45': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_9_11_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], '7_9_11_15': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], '7_9_11_30': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_9_11_45': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_9_12_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], '7_9_12_15': [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_9_12_30': [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], '7_9_12_45': [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], '7_9_6_0': [15, 15, 2, 2, 15, 15, 15, 15, 15, 3, 2, 15, 15, 15, 15, 15, 2, 2, 15, 15, 15, 15, 15, 2, 2, 15, 15, 15, 15, 15, 4], '7_9_6_15': [15, 15, 1, 0, 15, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 1, 0, 15, 15, 15, 15, 15, 1, 0, 15, 15, 15, 15, 15, 0], '7_9_6_30': [1, 5, 0, 0, 10, 2, 5, 1, 3, 0, 0, 9, 2, 7, 1, 2, 0, 0, 10, 6, 9, 0, 5, 0, 0, 15, 12, 14, 9, 12, 1], '7_9_6_45': [4, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 3, 2, 1, 1, 0, 0, 0, 3, 0, 0, 4, 2, 0, 0, 4, 0, 3, 3, 2, 0], '7_9_7_0': [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], '7_9_7_15': [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], '7_9_7_30': [0, 2, 0, 0, 0, 2, 1, 3, 0, 0, 1, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0], '7_9_7_45': [3, 4, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 4, 2, 5, 7, 0], '7_9_8_0': [0, 1, 1, 0, 4, 1, 1, 0, 2, 0, 0, 4, 1, 0, 0, 3, 0, 0, 3, 1, 0, 0, 1, 0, 0, 3, 0, 0, 1, 8, 0], '7_9_8_15': [1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0], '7_9_8_30': [0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], '7_9_8_45': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], '7_9_9_0': [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], '7_9_9_15': [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], '7_9_9_30': [0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], '7_9_9_45': [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}

    solver = MinHoursRoster(num_days=num_days,
                            resources=resources,
                            shifts=shifts,
                            shifts_hours=shifts_hours,
                            min_working_hours=min_working_hours,
                            max_resting=max_resting,
                            required_resources=required_resources,
                            banned_shifts=[],
                            #max_search_time=10 * 60,
                            strict_mode=False
                            )

    solution = solver.solve()
    status = Statuses(solution['status'])

    assert status.is_ok() is True

def test_deficit_logic():

    model = cp_model.CpModel()

    min_resources = 10
    max_resources = 20
    required = 25  # 5, 15

    works = model.NewIntVar(min_resources, max_resources, '')

    # z = abs(x-y)
    z = model.NewIntVar(0, max(max_resources, required), '')

    # z1 E [min(x)-max(y), max(x)-min(y)]
    z1 = model.NewIntVar(min_resources-required, max_resources-required, '')
    # z2 E [min(y)-max(x), max(y)-min(x)]
    z2 = model.NewIntVar(required-max_resources, required-min_resources, '')

    # z1 == x-y
    model.Add(z1 == works - required)
    # z2 == y-x
    model.Add(z2 == required - works)

    # z == max(z1, z2)
    model.AddMaxEquality(z, [z1, z2])

    model.Minimize(z)

    # Solve model.
    solver = cp_model.CpSolver()
    status = solver.Solve(model)

    if status in [cp_model.OPTIMAL, cp_model.FEASIBLE]:
        # Print out makespan and the start times for all tasks.
        print('Optimal Schedule Length: %i' % solver.ObjectiveValue())
        print(f'works = {solver.Value(works)}')
        print(f'z = {solver.Value(z)}')
        print(f'z1 = {solver.Value(z1)}')
        print(f'z2 = {solver.Value(z2)}')

    else:
        print('Solver exited with NON FEASIBLE status: %i' % status)
